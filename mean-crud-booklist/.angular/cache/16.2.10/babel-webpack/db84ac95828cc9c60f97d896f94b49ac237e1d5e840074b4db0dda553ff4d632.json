{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // Node/Express API\n    this.REST_API = 'http://localhost:8000/api';\n    // Http Header\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  // Get all books\n  GetBooks() {\n    return this.httpClient.get(`${this.REST_API}`);\n  }\n  // Update\n  UpdateBook(id, updatedData) {\n    let API_URL = `${this.REST_API}/update-book/${id}`;\n    return this.httpClient.put(API_URL, updatedData, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  // Delete\n  DeleteBook(id) {\n    let API_URL = `${this.REST_API}/delete-book/${id}`;\n    return this.httpClient.delete(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  // Error \n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Handle client error\n      errorMessage = error.error.message;\n    } else {\n      // Handle server error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function CrudService_Factory(t) {\n    return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CrudService,\n    factory: CrudService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","throwError","HttpHeaders","CrudService","constructor","httpClient","REST_API","httpHeaders","set","GetBooks","get","UpdateBook","id","updatedData","API_URL","put","headers","pipe","handleError","DeleteBook","delete","error","errorMessage","ErrorEvent","message","status","console","log","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pedga\\OneDrive\\Desktop\\helps\\Crud-Update-main\\Crud-Update-main\\CRUDCreateReadGPStarting\\mean-crud-booklist\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Book } from './Book';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n \n@Injectable({\n  providedIn: 'root'\n})\n \nexport class CrudService {\n \n  // Node/Express API\n  REST_API: string = 'http://localhost:8000/api';\n \n  // Http Header\n  httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n \n  constructor(private httpClient: HttpClient) { }\n \n  // Get all books\n  GetBooks() {\n    return this.httpClient.get(`${this.REST_API}`);\n  }\n \n// Update\nUpdateBook(id: any, updatedData: any): Observable<any> {\n  let API_URL = `${this.REST_API}/update-book/${id}`;\n  return this.httpClient.put(API_URL, updatedData, { headers: this.httpHeaders })\n    .pipe(\n  catchError(this.handleError)\n  );\n  }\n\n// Delete\nDeleteBook(id: any): Observable<any> {\n  let API_URL = `${this.REST_API}/delete-book/${id}`;\n  return this.httpClient.delete(API_URL, { headers: this.httpHeaders })\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n\n  // Error \n  handleError(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Handle client error\n      errorMessage = error.error.message;\n    } else {\n      // Handle server error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAAa,gBAAgB;AAChD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAAqBC,WAAW,QAA2B,sBAAsB;;;AAMjF,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAN9B;IACA,KAAAC,QAAQ,GAAW,2BAA2B;IAE9C;IACA,KAAAC,WAAW,GAAG,IAAIL,WAAW,EAAE,CAACM,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAEzB;EAE9C;EACAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAC,GAAG,IAAI,CAACJ,QAAQ,EAAE,CAAC;EAChD;EAEF;EACAK,UAAUA,CAACC,EAAO,EAAEC,WAAgB;IAClC,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACR,QAAQ,gBAAgBM,EAAE,EAAE;IAClD,OAAO,IAAI,CAACP,UAAU,CAACU,GAAG,CAACD,OAAO,EAAED,WAAW,EAAE;MAAEG,OAAO,EAAE,IAAI,CAACT;IAAW,CAAE,CAAC,CAC5EU,IAAI,CACPjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC3B;EACD;EAEF;EACAC,UAAUA,CAACP,EAAO;IAChB,IAAIE,OAAO,GAAG,GAAG,IAAI,CAACR,QAAQ,gBAAgBM,EAAE,EAAE;IAClD,OAAO,IAAI,CAACP,UAAU,CAACe,MAAM,CAACN,OAAO,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACT;IAAW,CAAE,CAAC,CAClEU,IAAI,CACHjB,UAAU,CAAC,IAAI,CAACkB,WAAW,CAAC,CAC7B;EACL;EAGE;EACAA,WAAWA,CAACG,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOrB,UAAU,CAACqB,YAAY,CAAC;EACjC;EAAC,QAAAM,CAAA,G;qBA9CUzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAHV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}